name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - feat/*
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm for GitHub Packages
        run: |
          echo "@kjfsoul:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npx tsc --noEmit
        continue-on-error: false

      - name: Check for linting issues
        run: npm run lint || echo "Lint check skipped (disabled in package.json)"
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm for GitHub Packages
        run: |
          echo "@kjfsoul:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Validate environment variables
        run: |
          echo "Checking required environment variables..."
          # Add checks for required env vars here
          # Example:
          # if [ -z "${{ secrets.PRINTIFY_API_TOKEN }}" ]; then
          #   echo "Warning: PRINTIFY_API_TOKEN not set"
          # fi

      - name: Build Next.js application
        env:
          NEXT_PUBLIC_3IATLAS_BASE: ${{ secrets.NEXT_PUBLIC_3IATLAS_BASE || 'https://3iatlas.printify.me/' }}
          NEXT_PUBLIC_ARCANA_BASE: ${{ secrets.NEXT_PUBLIC_ARCANA_BASE || 'https://mystic-arcana-pop-up.printify.me/' }}
          NEXT_PUBLIC_EDM_BASE: ${{ secrets.NEXT_PUBLIC_EDM_BASE || 'https://edm-shuffle-pop-up.printify.me/' }}
          NEXT_PUBLIC_BDAY_BASE: ${{ secrets.NEXT_PUBLIC_BDAY_BASE || 'https://birthdaygen-popup.printify.me/' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next
          retention-days: 7

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Deployed to Vercel: ${{ steps.deploy.outputs.url }}'
            })

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm for GitHub Packages
        run: |
          echo "@kjfsoul:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e || echo "E2E tests not configured yet"
        continue-on-error: true
        env:
          NEXT_PUBLIC_3IATLAS_BASE: 'https://3iatlas.printify.me/'
          NEXT_PUBLIC_ARCANA_BASE: 'https://mystic-arcana-pop-up.printify.me/'
          NEXT_PUBLIC_EDM_BASE: 'https://edm-shuffle-pop-up.printify.me/'
          NEXT_PUBLIC_BDAY_BASE: 'https://birthdaygen-popup.printify.me/'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, deploy-vercel]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Success notification
        run: |
          echo "âœ… Deployment successful!"
          echo "All checks passed and application deployed to Vercel"

